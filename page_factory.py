from telebot import types
from page import Page
from user import User
from test_client import Test_Client

class PageFactory:

    client = Test_Client()

    HOME = "home"
    USER = "user"
    SEARCH = "search"
    SEARCH_BY_FOTO = "search_by_foto"
    BALANCE = "balance"
    TOP_UP_BALANCE = "top_up_balance"
    HELP = "help"

    BUTTONS = {
        HOME: types.InlineKeyboardButton("it's home page", callback_data=HOME),
        USER: types.InlineKeyboardButton("üîí–ê–∫–∫–∞—É–Ω—Ç", callback_data=USER),
        SEARCH: types.InlineKeyboardButton("üîç–ü–æ–∏—Å–∫", callback_data=SEARCH),
        SEARCH_BY_FOTO: types.InlineKeyboardButton("üì∏–ü–æ –ö–∞—Ä—Ç–∏–Ω–∫–µ", callback_data=SEARCH_BY_FOTO),
        BALANCE: types.InlineKeyboardButton("üí∞–ë–∞–ª–∞–Ω—Å", callback_data=BALANCE),
        TOP_UP_BALANCE: types.InlineKeyboardButton("üí≤–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=TOP_UP_BALANCE),
        HELP: types.InlineKeyboardButton("üÜòHELP", callback_data=HELP),

    }

    def previous_button(self, previous_page_indicator):
        return types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=previous_page_indicator)

    def manage_callback(self, callback):
        BUTTON_TO_CALLBACK = {
            self.HOME: self.home,
            self.USER: self.user,
            self.SEARCH: self.search,
            self.SEARCH_BY_FOTO: self.search_by_foto,
            self.BALANCE: self.balance,
            self.TOP_UP_BALANCE: self.top_up_balance,
            self.HELP: self.help
        }

        callback_indicator = callback.data
        user_indicator = callback.from_user.id
        user = self.client.get_user_by_id(user_indicator)

        # check user exist
        if user is None:
            # registration
            user = self.client.registration(User(user_indicator))

        if callback_indicator in BUTTON_TO_CALLBACK:
            return BUTTON_TO_CALLBACK[callback_indicator](user)

        return self.home(user)

    @staticmethod
    def home(user: User):

        buttons = types.InlineKeyboardMarkup([
            [PageFactory.BUTTONS[PageFactory.SEARCH]],
            [PageFactory.BUTTONS[PageFactory.USER], PageFactory.BUTTONS[PageFactory.TOP_UP_BALANCE]],
        ])

        message = f'''

–≠—Ç–æ –±–æ—Ç c –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –ª—é–¥–µ–π –≤ —Å–µ—Ü.—Å–µ—Ç—è—Ö –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º.

–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1.


–í–∞—à –±–∞–ª–∞–Ω—Å 100
        '''


        return Page(message, buttons, user)



    def user(self, user: User):
        buttons = types.InlineKeyboardMarkup([
            [self.previous_button(self.HOME)]
        ])

        message = f'''
        
–£—Å–ª–æ–≤–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
–ö —Å–æ–∂–∏–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ.


–í–∞—à –±–∞–ª–∞–Ω—Å - 100
        '''

        return Page(message, buttons, user)

    def search_by_foto(self, user: User):
        buttons = types.InlineKeyboardMarkup([
            [self.previous_button(self.SEARCH)]
        ])
        self.client.update_state(user, User.STATE_SEARCH_IMAGE)

        message = '''
            –î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ.
        '''

        return Page(message, buttons, user)

    def search(self, user: User):
        buttons = types.InlineKeyboardMarkup([
            [self.previous_button(self.HOME)],
            [PageFactory.BUTTONS[PageFactory.SEARCH_BY_FOTO]]
        ])

        message = '''
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ü.—Å–µ—Ç–∏:
‚Äî VK
‚Äî –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞.
        '''

        return Page(message, buttons, user)

    def balance(self, user: User):
        buttons = types.InlineKeyboardMarkup([
            [self.previous_button(self.HOME)],
            [PageFactory.BUTTONS[PageFactory.SEARCH]],
            [PageFactory.BUTTONS[PageFactory.TOP_UP_BALANCE]]
        ])

        message = f'''
        
–£—Å–ª–æ–≤–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è

–ú–∏–Ω–∏–º—É–º 10‚ÇΩ
50‚ÇΩ + 10%
100‚ÇΩ + 20%
300‚ÇΩ + 30%

Your balance - {user.balance}‚ÇΩ
'''

        return Page(message, buttons, user)

    def top_up_balance(self, user: User):
        buttons = types.InlineKeyboardMarkup([
            [self.previous_button(self.HOME)]
        ])

        user.state = User.STATE_PAY

        message_1 = f'''
–ú–∏–Ω–∏–º—É–º 10‚ÇΩ
50‚ÇΩ + 10%
100‚ÇΩ + 20%
300‚ÇΩ + 30%

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å. 

'''
        message = f'''
        
        –ö —Å–æ–∂–∏–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω –¥–æ—Å—Ç—É–ø–Ω–æ.
        
        '''

        return Page(message, buttons, user)

    def balance_error(self, user: User):
        buttons = types.InlineKeyboardMarkup([
            [self.previous_button(self.HOME)]
        ])

        message = f'''
        
        –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å—é
        
        –ö —Å–æ–∂–∏–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ.
        '''
        return Page(message, buttons, user)

    def help(self, user: User):
        buttons = types.InlineKeyboardMarkup([
            [self.previous_button(self.USER)],
            [PageFactory.BUTTONS[PageFactory.SEARCH]],
            [PageFactory.BUTTONS[PageFactory.TOP_UP_BALANCE]]
        ])

        message = f'''
                1 day - 10‚ÇΩ
                3 day - 25‚ÇΩ
                6 day - 50‚ÇΩ
                20 day - 100‚ÇΩ
                30 day - 140‚ÇΩ
                Limit 10 foto in one day
                Your balance - {user.balance} 
                '''

        return Page(message, buttons, user)